<?php

/**
 * @file alma_user.install
 * Installation and upgrade hooks for the alma_user module.
 */

/**
 * Implementation of hook_uninstall().
 */
function alma_user_uninstall() {
  variable_del('alma_user_credential_cache_duration');
  variable_del('alma_user_pin_length');
}

/**
 * Implementation of hook_update_N().
 *
 * Add the preferred branch column to alma_user.
 */
function alma_user_update_6001() {
  $ret = array();
  db_add_field($ret, 'alma_user', 'preferred_branch', array('type' => 'varchar', 'length' => 50));
  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 * Add a new cache table for Alma user status.
 */
function alma_user_update_6002() {
  $ret = array();
  db_create_table($ret, 'cache_alma_status', drupal_get_schema_unprocessed('system', 'cache'));
  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 * Drop alma_name.
 */
function alma_user_update_6003() {
  $ret = array();

  db_drop_field($ret, 'alma_user', 'alma_name');

  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 * Add interest_period.
 */
function alma_user_update_6004() {
  $ret = array();
  db_add_field($ret, 'alma_user', 'interest_period', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'size' => 'small',
  ));
  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 * Remove obsolte table for caching Alma status
 */
function alma_user_update_6005() {
  $ret = array();
  db_drop_table($ret, 'cache_alma_status');
  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 * Add field for storing message service preferences
 */
function alma_user_update_6006() {
  $ret = array();
  db_add_field($ret, 'alma_user', 'message_services', array(
    'type' => 'text',
    'description' => 'User message service preferences.',
  ));
  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 * Refactorings for ding_library_user:
 * - Remove credentials cache
 * - Set weight to 10 - ding_library_user is 0
 */
function alma_user_update_6007() {
  $ret = array();
  db_drop_table($ret, 'cache_alma_credentials');
  $ret[] = update_sql('UPDATE system SET weight = 10 WHERE name = "alma_user"');
  return $ret;
}

/**
 * Move alma_user data to user and authmap.
 */
function alma_user_update_6008() {
  $ret = array();

  if (!isset($sandbox['total'])) {
    $sandbox['total'] = db_result(db_query('SELECT COUNT(DISTINCT uid) FROM {alma_user}'));
  }

  $alma_users = db_query_range("SELECT uid, alma_id, preferred_branch, interest_period, message_services FROM {alma_user} ORDER BY uid ASC", 0, 500);
  while ($alma_user = db_fetch_object($alma_users)) {
    // We're going around user_save for performance reasons.
    $user = db_fetch_object(db_query("SELECT uid, data FROM {users} WHERE uid = %d", $alma_user->uid));
    if ($user and $user->data = unserialize($user->data)) {
      if ($alma_user->preferred_branch) {
        $user->data['preferred_branch'] = $alma_user->preferred_branch;
      }
      if ($alma_user->interest_period) {
        $user->data['interest_period'] = $alma_user->interest_period;
      }
      if ($alma_user->message_services) {
        $user->data['message_services'] = $alma_user->message_services;
      }
      $auth_name = md5(drupal_get_private_key() . $alma_user->alma_id) . "@alma_user";
      db_query("UPDATE {users} SET data='%s', name='%s' WHERE uid = %d", serialize($user->data), $auth_name, $user->uid);
      user_set_authmaps($user, array('authname_alma_user' => $auth_name));
    }
    db_query("DELETE FROM {alma_user} WHERE uid = %d", $alma_user->uid);
  }

  $remaining = db_result(db_query('SELECT COUNT(DISTINCT uid) FROM {alma_user}'));
  $sandbox['done'] = $sandbox['total'] - $remaining;

  $ret['#finished'] = empty($sandbox['total']) ? 1 :
    ($sandbox['done'] / $sandbox['total']);

  if ($ret['#finished'] == 1) {
    // Finally, drop the table.
    db_drop_table($ret, 'alma_user');
  }

  return $ret;
}

/**
 * Migrate settings to ding_library_user.
 */
function alma_user_update_6009() {
  $val = variable_get('alma_user_credential_cache_duration', FALSE);
  if ($val) {
    variable_set('ding_library_user_credential_cache_duration', $val);
  }
  variable_del('alma_user_credential_cache_duration', FALSE);

  $val = variable_get('alma_user_pin_length', FALSE);
  if ($val) {
    variable_set('ding_library_user_password_length', $val);
  }
  variable_del('alma_user_pin_length');
}
