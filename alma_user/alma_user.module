<?php
// $Id$

/**
 * Implementation of hook_user().
 */
function alma_user_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load':
      if ($account->library_user_id) {
        // Attach the Alma user id and name to the user object when it
        // is loaded, so it's available everywhere the user is.
        $data = db_fetch_array(db_query("SELECT * FROM {alma_user} WHERE uid = %d LIMIT 1;", $account->library_user_id));
        $account->preferred_branch = $data['preferred_branch'];
        $account->interest_period = $data['interest_period'];
        $account->message_services = ($data['message_services']) ? unserialize($data['message_services']) : NULL;
      }
      break;
    case 'delete':
      db_query('DELETE FROM {alma_user} WHERE uid=%d', $account->library_user_id);
      // Tricky: No break, delete also performs the same actions as logout.
  }
}

/**
 * Implementation of hook_init().
 */
function alma_user_init() {
  global $user;
  $edit = array();

  // Fire our own hook_user to have the Alma data available on the
  // global $user object.
  if ($user->uid > 1) {
    alma_user_user('load', $edit, $user);
  }
}

/**
 * Implementation of hook_theme().
 */
function alma_user_theme($existing, $type, $theme, $path) {
  return array(
    'ding_library_user_personal_info' => array(
      'arguments' => array(
        'account' => NULL,
        'alma_data' => NULL,
      ),
      'template' => 'ding_library_user_personal_info',
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 *
 * Alter the login form to disable the standard Drupal username/password
 * combination and provide our own fields instead.
 */
function alma_user_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      // Since the login name can be a user's CPR-number, that too is hidden.
      $form['name']['#type'] = 'password';

      // Add our own validation handler.
      array_unshift($form['#validate'], 'alma_user_login_validate');

      break;
    case 'user_profile_form':
      // When we have credentials available, make library patron
      // information available for altering.
    	if (isset($form['ding_library_user_info'])) {
        $form['account']['alma_user_phone'] = array(
          '#type' => 'textfield',
          '#title' => t('Phone number'),
          '#description' => t('Phone number where the library can contact you. Is not published on the web site.'),
          '#default_value' => $form['ding_library_user_info']['#value']['phones'][0]['phone'],
        );
    		
        // Add our own validation and submit handling.
        array_unshift($form['#validate'], 'alma_user_profile_validate');
        $form['#submit'][] = 'alma_user_profile_submit';

      }
      break;
    case 'ding_library_user_forms_authenticate':
    	$form['#validate'][] = 'ding_library_user_forms_authenticate_validate';
    	break;
  }
}


/**
 * Validation for settings form.
 */
function ding_library_user_admin_settings_form_validate($form, &$form_state) {
  // Force PIN length to be an integer.
  $form_state['values']['ding_library_user_password_length'] = intval($form_state['values']['ding_library_user_password_length']);

  if ($form_state['values']['ding_library_user_pin_length'] <= 0) {
    form_set_error('ding_library_user_pin_length', t('PIN code length must be a number larger than zero.'));
  }
}



/**
 * Validation for the user profile form.
 */
function alma_user_profile_validate($form, &$form_state) {
  if (strlen($form_state['values']['alma_user_phone']) > 0) {
    $number = preg_replace('/\D+/', '', $form_state['values']['alma_user_phone']);
    if (strlen($number) != 8 && $number > 20000000) {
      form_set_error('account][alma_user_name', t('Phone number must be 8 digits.'));
    }
    else {
      // If processed number was valid, set it as the correct value.
      form_set_value($form['account']['alma_user_phone'], $number, $form_state);
    }
  }
}

/**
 * Submit handler for the user profile form.
 */
function alma_user_profile_submit($form, &$form_state) {
  $account = $form['_account']['#value'];
  $creds = ding_library_user_get_credentials($account);
  $user_info = $form_state['values']['ding_library_user_info'];

  if (!empty($form_state['values']['alma_user_phone'])) {
    if (!empty($user_info['phones'])) {
      // If user has a phone number, update it.
      alma_client_change_phone_number($creds['borr_card'], $creds['pin_code'], $user_info['phones'][0]['id'], $form_state['values']['alma_user_phone']);
    }
    else {
      // If a phone number doesn't exist, add a new one.
      alma_client_add_phone_number($creds['borr_card'], $creds['pin_code'], $form_state['values']['alma_user_phone']);
    }

    // If user does not already have a SMS message service then add one
    if (!isset($account->message_services[ALMA_SERVICE_METHOD_SMS][ALMA_SERVICE_TYPE_DUE_DATE_ALERT]) || 
        !$account->message_services[ALMA_SERVICE_METHOD_SMS][ALMA_SERVICE_TYPE_DUE_DATE_ALERT]) {
	    // Add a due date alerts as SMS service per default 
	    alma_client_add_message_service($creds['borr_card'], $creds['pin_code'], ALMA_SERVICE_METHOD_SMS, ALMA_SERVICE_TYPE_DUE_DATE_ALERT);
	    
	    // Update local user settings accordingly
	    $message_services = array(ALMA_SERVICE_METHOD_SMS => array(ALMA_SERVICE_TYPE_DUE_DATE_ALERT => 1));
	    $alma_user = array('uid' => $account->uid, 'message_services' => serialize($message_services));
	    drupal_write_record('alma_user', $alma_user, 'uid');
    }
  }
  elseif (!empty($user_info['phones'])) {
    // If the user has cleared out his phone number field, remove all
    // phone numbers from the database (not just the first, since then
    // one of the others will just take its place, confusing the user).
    foreach ($user_info['phones'] as $phone) {
      alma_client_remove_phone_number($creds['borr_card'], $creds['pin_code'], $phone['phone']);
    }

    // Also remove SMS messaging service
    alma_client_remove_message_service($creds['borr_card'], $creds['pin_code'], ALMA_SERVICE_METHOD_SMS, ALMA_SERVICE_TYPE_DUE_DATE_ALERT);
    
    // Update local user settings accordingly
    unset($account->message_services[ALMA_SERVICE_METHOD_SMS]);
    $alma_user = array('uid' => $account->uid, 'message_services' => serialize($account->message_services));
    drupal_write_record('alma_user', $alma_user, 'uid');
  }
}

/**
 * Validation for the login form.
 */
function alma_user_login_validate($form, &$form_state) {
  // Remove everything but numbers from the “name” field to try and
  // validate it as a library/borrower card.
  $card = preg_replace('/\D+/', '', $form_state['values']['name']);
  
  //CPR-numbers contain 10 digits
  if (strlen($card) != 10) {
  	return false;
  }
}


/**
 * User library settings form.
 */
function alma_user_form_forms_library_settings_alter(&$form, &$form_state) {
  $account = $form['account']['value'];

  $form['preferred_branch'] = array(
    '#type' => 'select',
    '#title' => t('Preferred library'),
    '#options' => alma_client_get_reservation_branches(),
    '#default_value' => $account->preferred_branch,
  );

  $form['interest_period'] = array(
    '#type' => 'select',
    '#title' => t('Period of interest'),
    '#description' => t('How long are you willing to wait for a reservation?'),
    '#options' => array(
      '30' => t('A month'),
      '60' => t('Two months'),
      '90' => t('Three months'),
      '183' => t('Six months'),
      '365' => t('A year'),
    ),
    '#default_value' => (isset($account->interest_period) && $account->interest_period > 10) ? $account->interest_period : ALMA_USER_DEFAULT_INTEREST_PERIOD,
  );

  $form['suspend_start'] = array(
    '#type' => 'date_popup',
    '#title' => t('Suspend reservations from'),
    '#date_format' => DATE_FORMAT_DATE,
    '#default_value' => (isset($account->user_info['absent_periods'][0])) ? $account->user_info['absent_periods'][0]['from_date'] : '',
  );

  $form['suspend_end'] = array(
    '#type' => 'date_popup',
    '#title' => t('To'),
    '#date_format' => DATE_FORMAT_DATE,
    '#default_value' => (isset($account->user_info['absent_periods'][0])) ? $account->user_info['absent_periods'][0]['to_date'] : '',
  );
  
  $form['#validate'][] = 'alma_user_forms_library_settings_validate';
  $form['#submit'][] = 'alma_user_forms_library_settings_submit';
}

/**
 * Validation for user library settings.
 */
function alma_user_forms_library_settings_validate($form, &$form_state) {
  if (!empty($form_state['values']['suspend_start']) && !empty($form_state['values']['suspend_end'])) {
    $start = date_make_date($form_state['values']['suspend_start']);
    $end = date_make_date($form_state['values']['suspend_end']);

    if ($start <= new DateTime()) {
      form_set_error('suspend_start', t('Start date must later than today'));
    }

    if ($start >= $end) {
      form_set_error('suspend_start', t('Start date must be before end date'));
    }
    else {
      $form_state['values']['suspend'] = array('start' => $start, 'end' => $end);
    }
  }
}

/**
 * Implements hook_ding_library_user_get_info().
 */
function alma_user_ding_library_user_get_info($creds, $extended = FALSE) {
	$info = alma_client_get_patron_info($creds['user_id'], $creds['password'], TRUE);
	return $info;
}

/**
 * Implements hook_ding_library_user_get_reservations().
 */
function alma_user_ding_library_user_get_reservations($creds) {
	$reservations = alma_client_get_reservations($creds['user_id'], $creds['password']);
  return $reservations;
}

/**
 * Implements hook_ding_library_user_get_loans().
 */
function alma_user_ding_library_user_get_loans($creds) {
	$loans = alma_client_get_loans($creds['user_id'], $creds['password']);
	return $loans;
}

/**
 * Implements hook_ding_library_user_get_debts().
 */
function alma_user_ding_library_user_get_debts($creds) {
	$debts = alma_client_get_debts($creds['user_id'], $creds['password']);
	return $debts;
}

/**
 * Implements hook_ding_library_user_update_info().
 *
 * @param Array $creds 
 * @param Array $new_info 
 * $new_info = array(
 *   'absent' => array(
 *    'id' => '',
 *    'from_date' => '',
 *    'to_date' => '',
 *  ),
 *  'branch' => '',
 *  'email' => '',
 *  'password' => '',
 *  'phone' => '',
 *  );
 * @param Array $old_info 
 * @return void
 */

function alma_user_ding_library_user_update_info($creds, $new_info, $old_info = FALSE) {
  foreach ($new_info as $field_name => $value) {
    
    if ($old_info && array_key_exists($field_name, $old_info) && $old_info[$field_name] == $value) {
      continue;
    }
    
    switch ($field_name) {
      case 'absent':
        alma_client()->change_absent_period($creds['user_id'], $creds['password'], $new_info['absent']['id'], $new_info['absent']['from_date'], $new_info['absent']['to_date']);
      break;
      case 'branch':
        alma_client()->change_patron_preferences($creds['user_id'], $creds['password'], $value);
      break;
      case 'email':
        if (empty($old_info['email']) && !empty($value)) {
          alma_client()->add_email_address($creds['user_id'], $creds['password'], $value);
        }
        elseif (!empty($old_info['email']) && !empty($value)) {
          alma_client()->change_email_address($creds['user_id'], $creds['password'], $old_info['email'], $value);
        }
      break;
      case 'password':
        alma_client()->change_pin($creds['user_id'], $creds['password'], $value);
      break;
      case 'phone':
        if (!empty($value) && empty($old_info['phone'])) {
          alma_client()->add_phone_number($creds['user_id'], $creds['password'], $value);
        }
        if (empty($value) && !empty($old_info['phone'])) {
          alma_client()->remove_phone_number($creds['user_id'], $creds['password'], $value);
        }
        else {
          alma_client()->change_phone_number($creds['user_id'], $creds['password'], $old_info['phone'], $value);
        }
      break;
    }
  }
}

/**
 * Implements hook_ding_update_reservation().
 */
function alma_user_ding_update_reservation($creds, $reservation, $changes) {
  alma_client_change_reservation($creds['user_id'], $creds['password'], $reservation, $changes);
}

/**
 * Implements hook_ding_renew_loans().
 */
function alma_user_ding_renew_loans($creds, $loan_ids) {
	alma_client_renew_loan($creds['user_id'], $creds['password'], $loan_ids);
}

/**
 * Implements hook_ding_delete_reservations().
 */
function alma_user_ding_delete_reservations($creds, $reservation) {
	alma_client_remove_reservation($creds['user_id'], $creds['password'], $reservation);
}

/**
 * Implements hook_ding_create_reservation().
 */
function alma_user_ding_create_reservation($creds, $reservation) {
	alma_client_add_reservation($creds['user_id'], $creds['password'], $reservation);
}

/**
 * Implements hook_ding_user_has_reservation().
 */
function alma_user_ding_user_has_reservation($creds, $item_id) {
	$reservations = alma_client_user_has_reservation($creds['user_id'], $creds['password'], $item_id);
  return $reservartions;
}

/**
 * Submit handler for user library settings.
 */
function alma_user_forms_library_settings_submit($form, &$form_state) {
  $creds = alma_user_get_credentials($form_state['values']['account']);

  $info = alma_client_get_patron_info($creds['user_id'], $creds['password'], TRUE);

  if (isset($form_state['values']['suspend'])) {
    $start = date_format_date($form_state['values']['suspend']['start'], 'custom', DATE_FORMAT_DATE);
    $end = date_format_date($form_state['values']['suspend']['end'], 'custom', DATE_FORMAT_DATE);
  }

  if (isset($info['absent_periods']) && !empty($info['absent_periods'])) {
    if (isset($start) && isset($end)) {
      // Update the current period.
      alma_client_change_absent_period($creds['user_id'], $creds['password'], $info['absent_periods'][0]['id'], $start, $end);
    }
    else {
      // If either date field had no valid value, remove the absent period.
      alma_client_remove_absent_period($creds['user_id'], $creds['password'], $info['absent_periods'][0]['id']);
    }
  }
  elseif (isset($start) && isset($end)) {
    // Create a new absent period.
    alma_client_add_absent_period($creds['user_id'], $creds['password'], $start, $end);
  }

  if ($form_state['values']['preferred_branch'] != $form_state['values']['account']->preferred_branch) {
    // Update the preferred branch in the database.
    db_query("UPDATE {alma_user} SET preferred_branch = '%s' WHERE uid = %d LIMIT 1;", $form_state['values']['preferred_branch'], $form_state['values']['account']->uid);

    // And save the new choice to Alma.
    alma_client_change_patron_preferences($creds['user_id'], $creds['password'], $form_state['values']['preferred_branch']);
  }

  if ($form_state['values']['interest_period'] != $form_state['values']['account']->interest_period) {
    db_query('UPDATE {alma_user} SET interest_period = %d WHERE uid = %d LIMIT 1;', $form_state['values']['interest_period'], $form_state['values']['account']->uid);
  }
}

/**
 * Validation for authentication form.
 */
function alma_user_form_authenticate_validate($form, &$form_state) {
  // Remove everything but numbers from the user_id field value.
  $form_state['values']['user_id'] = preg_replace('/\D+/', '', $form_state['values']['user_id']);
}

/**
 * Implementation of hook_ding_library_user_create().
 */
function alma_user_ding_library_user_create($account, $user_info) {
  $branch = (isset($user_info['preferences']['user_branch'])) ? $user_info['preferences']['user_branch'] : '';

  // Store Alma user data in our own table.
  db_query("INSERT INTO {alma_user} (alma_id, preferred_branch) VALUES (%d, '%s');", $user->library_user_id, $branch);
}

/**
 * Implementation of hook_ding_library_user_block_codes().
 * 
 * Get list of Alma block codes with their descriptions.
 */
function alma_user_ding_library_user_block_codes() {
  return array(
    'a' => 'Forkert adresse',
    'c' => 'CPR-nr. fejl jf. folkeregister',
    'd' => 'Låneren død jf. folkeregister',
    'f' => 'Forældre-forbud',
    'g' => 'Låneforbud',
    'o' => 'Oprettet under nødudlån - låner skal i',
    's' => 'Blokeret af selvbetjeningsterminal',
    'u' => 'ukendt adresse i folkeregister',
    'v' => 'Lånerkort/sygesik. væk',
    'x' => 'Forsvundet jf. folkeregistret',
  );
}

