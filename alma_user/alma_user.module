<?php
// $Id$

/**
 * Implementation of hook_theme().
 */
function alma_user_theme($existing, $type, $theme, $path) {
  return array(
    'ding_library_user_personal_info' => array(
      'arguments' => array(
        'account' => NULL,
        'alma_data' => NULL,
      ),
      'template' => 'ding_library_user_personal_info',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function alma_user_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ding_provider') {
    return "plugins/$plugin";
  }
}

/**
 * Implementation of hook_user().
 */
function alma_user_user($op, &$edit, &$account, $category = NULL) {
  if (!$category || $category != 'account') {
    return;
  }
  switch ($op) {
    case 'form':
      $form = array();
      $creds = ding_library_user_get_credentials($account);

      if ($creds != DING_PROVIDER_AUTH_REQUIRED) {
        $info = alma_client_get_patron_info($creds['user_id'], $creds['password'], TRUE);

        $form['account']['alma_old_values'] = array(
          '#type' => 'value',
          '#value' => $info,
        );

        $form['account']['alma_user_phone'] = array(
          '#type' => 'textfield',
          '#title' => t('Phone number'),
          '#description' => t('Phone number where the library can contact you. Is not published on the web site.'),
          '#default_value' => $info['phones'][0]['phone'],
          '#element_validate' => array('ding_base_element_validate_phone_number'),
          '#weight' => 1,
        );
      }
      return $form;
      break;
    case 'validate':
      break;
    case 'submit':
      $old_info = $edit['alma_old_values'];
      $creds = ding_library_user_get_credentials($account);

      if ($creds != DING_PROVIDER_AUTH_REQUIRED) {
        if ($edit['mail'] != $account->mail) {
          if (empty($old_info['mails'][0]['id']) && !empty($edit['mail'])) {
            alma_client_invoke('add_email_address', $creds['user_id'], $creds['password'], $edit['mail']);
          }
          elseif (!empty($old_info['mails'][0]['id']) && !empty($edit['mail'])) {
            dpm('changing');
            alma_client_invoke('change_email_address', $creds['user_id'], $creds['password'], $old_info['mails'][0]['id'], $edit['mail']);
          }
        }
        if ($edit['alma_user_phone'] != $old_info['phones'][0]['phone']) {
          if (!empty($edit['alma_user_phone'])) {
            if (empty($old_info['phones'][0]['id'])) {
              alma_client_invoke('add_phone_number', $creds['user_id'], $creds['password'], $edit['alma_user_phone']);
            }
            else {
              alma_client_invoke('change_phone_number', $creds['user_id'], $creds['password'], $old_info['phones'][0]['id'], $edit['alma_user_phone']);
            }
            // If user does not already have a SMS message service then add one
            if (!isset($account->message_services[ALMA_SERVICE_METHOD_SMS][ALMA_SERVICE_TYPE_DUE_DATE_ALERT]) ||
              !$account->message_services[ALMA_SERVICE_METHOD_SMS][ALMA_SERVICE_TYPE_DUE_DATE_ALERT]) {
              // Add a due date alerts as SMS service per default
              alma_client()->add_message_service($creds['user_id'], $creds['password'], ALMA_SERVICE_METHOD_SMS, ALMA_SERVICE_TYPE_DUE_DATE_ALERT);

              // Update local user settings accordingly
              $account->message_services = array(
                ALMA_SERVICE_METHOD_SMS => array(
                  ALMA_SERVICE_TYPE_DUE_DATE_ALERT => 1
                )
              );
            }
          }
          else {
            if (!empty($old_info['phones'][0]['id'])) {
              alma_client()->remove_phone_number($creds['user_id'], $creds['password'], $old_info['phones'][0]['id']);
              // Also remove SMS messaging service
              alma_client()->remove_message_service($creds['user_id'], $creds['password'], ALMA_SERVICE_METHOD_SMS, ALMA_SERVICE_TYPE_DUE_DATE_ALERT);

              // Update local user settings accordingly
              unset($account->message_services[ALMA_SERVICE_METHOD_SMS]);
            }
          }

        }
        unset($edit['alma_old_values'], $edit['alma_user_phone']);
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Alter the login form to disable the standard Drupal username/password
 * combination and provide our own fields instead.
 */
function alma_user_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
    case 'ding_library_user_authenticate_form':
      // Since the login name can be a user's CPR-number, that too is hidden.
      $form['name']['#type'] = 'password';
    break;
  }
}

/**
 * Validation for settings form.
 */
function ding_library_user_admin_settings_form_validate($form, &$form_state) {
  // Force PIN length to be an integer.
  $form_state['values']['ding_library_user_password_length'] = intval($form_state['values']['ding_library_user_password_length']);

  if ($form_state['values']['ding_library_user_pin_length'] <= 0) {
    form_set_error('ding_library_user_pin_length', t('PIN code length must be a number larger than zero.'));
  }
}

/**
 * Implements hook_ding_library_user_update_info().
 *
 * @param Array $creds
 * @param Array $new_info
 * $new_info = array(
 *   'absent' => array(
 *    'id' => '',
 *    'from_date' => '',
 *    'to_date' => '',
 *  ),
 *  'branch' => '',
 *  'email' => '',
 *  'password' => '',
 *  'phone' => '',
 *  );
 * @param Array $old_info
 * @return void
 *
 * @todo
 *  fold into hook_user()
 */

function alma_user_ding_library_user_update_info($creds, $new_info, $old_info = FALSE) {
  foreach ($new_info as $field_name => $value) {

    if ($old_info && array_key_exists($field_name, $old_info) && $old_info[$field_name] == $value) {
      continue;
    }

    switch ($field_name) {
      case 'absent':
        alma_client()->change_absent_period($creds['user_id'], $creds['password'], $new_info['absent']['id'], $new_info['absent']['from_date'], $new_info['absent']['to_date']);
      break;
      case 'branch':
        alma_client()->change_patron_preferences($creds['user_id'], $creds['password'], $value);
      break;
      case 'email':
        if (empty($old_info['mails'][0]['id']) && !empty($value)) {
          alma_client()->add_email_address($creds['user_id'], $creds['password'], $value);
        }
        elseif (!empty($old_info['mails'][0]['id']) && !empty($value)) {
          alma_client()->change_email_address($creds['user_id'], $creds['password'], $old_info['mails'][0]['id'], $value);
        }
      break;
      case 'password':
        alma_client()->change_pin($creds['user_id'], $creds['password'], $value);
      break;
      case 'phones':
        if (!empty($value)) {
          if (empty($old_info['phones'][0]['id'])) {
            alma_client()->add_phone_number($creds['user_id'], $creds['password'], $value);
          }
          else {
            alma_client()->change_phone_number($creds['user_id'], $creds['password'], $old_info['phones'][0]['id'], $value);
          }
          // If user does not already have a SMS message service then add one
          if (!isset($account->message_services[ALMA_SERVICE_METHOD_SMS][ALMA_SERVICE_TYPE_DUE_DATE_ALERT]) ||
              !$account->message_services[ALMA_SERVICE_METHOD_SMS][ALMA_SERVICE_TYPE_DUE_DATE_ALERT]) {
            // Add a due date alerts as SMS service per default
            alma_client()->add_message_service($creds['user_id'], $creds['password'], ALMA_SERVICE_METHOD_SMS, ALMA_SERVICE_TYPE_DUE_DATE_ALERT);

            // Update local user settings accordingly
            $message_services = array(ALMA_SERVICE_METHOD_SMS => array(ALMA_SERVICE_TYPE_DUE_DATE_ALERT => 1));
            $alma_user = array('alma_id' => $account->uid, 'message_services' => serialize($message_services));
            drupal_write_record('alma_user', $alma_user, 'alma_id');
          }
        }
        else {
          if (!empty($old_info['phones'][0]['id'])) {
            alma_client()->remove_phone_number($creds['user_id'], $creds['password'], $old_info['phones'][0]['id']);
            // Also remove SMS messaging service
            alma_client()->remove_message_service($creds['user_id'], $creds['password'], ALMA_SERVICE_METHOD_SMS, ALMA_SERVICE_TYPE_DUE_DATE_ALERT);

            // Update local user settings accordingly
            unset($account->message_services[ALMA_SERVICE_METHOD_SMS]);
            $alma_user = array('alma_id' => $account->uid, 'message_services' => serialize($account->message_services));
            drupal_write_record('alma_user', $alma_user, 'alma_id');

          }
        }
      break;
    }
  }
}

/**
 * Implements hook_ding_library_user_get_debts().
 */
function alma_user_ding_library_user_get_debts($user) {
  $creds = ding_library_user_get_credentials($user);
  $debts = alma_client_get_debts($creds['user_id'], $creds['password']);
  return $debts;
}

/**
 * Get list of Alma block codes with their descriptions.
 */
function alma_user_block_codes() {
  return array(
    'a' => 'Forkert adresse',
    'c' => 'CPR-nr. fejl jf. folkeregister',
    'd' => 'Låneren død jf. folkeregister',
    'f' => 'Forældre-forbud',
    'g' => 'Låneforbud',
    'o' => 'Oprettet under nødudlån - låner skal i',
    's' => 'Blokeret af selvbetjeningsterminal',
    'u' => 'ukendt adresse i folkeregister',
    'v' => 'Lånerkort/sygesik. væk',
    'x' => 'Forsvundet jf. folkeregistret',
  );
}

// Reservation related functions.

function alma_user_form_ding_reservation_list_form_alter(&$form, $form_state) {
  $form['options']['new_expiry'] = array(
    '#type' => 'date_popup',
    '#title' => t('Valid to'),
    '#date_format' => DATE_FORMAT_DATE,
    '#date_year_range' => '-0:+2',
  );

  $form['options']['new_pickup_branch'] = array(
    '#type' => 'select',
    '#title' => t('New pickup branch'),
    '#options' => alma_client_get_reservation_branches(),
  );

  $form['buttons']['update'] = array(
    '#type' => 'submit',
    '#value' => t('Save changes for selected reservations'),
    '#attributes' => array('class' => 'update-button'),
    '#validate' => array('alma_user_ding_reservation_list_form_validate'),
    '#submit' => array('alma_user_ding_reservation_list_form_update'),
  );

  $form['buttons']['remove'] = array(
    '#type' => 'submit',
    '#value' => t('Delete selected reservations'),
    '#attributes' => array('class' => 'cancel-button'),
    '#submit' => array('alma_user_ding_reservation_list_form_remove'),
  );

}

function alma_user_ding_reservation_list_form_validate($form, $form_state) {
  $reservations = $form_state['values']['reservations'];
  foreach (array_filter($form_state['values']['selected']) as $id) {
    // Detect fetable reservations...
    if (($reservations[$id]['status'] == 'fetchable')) {
      if (!empty($form_state['values']['new_expiry'])) {
        form_error($form['selected'][$id], t('You can not change expiry on reservations which are ready for pick up'));
      }
    }
    // TODO: Something like it to check that pickup_branch is not changed either.
  }

  if (!empty($form_state['values']['new_expiry'])) {
    list($year, $month, $day) = explode('-', trim($form_state['values']['new_expiry']));
    if (!checkdate($month, $day, $year)) {
      form_error($form['options']['new_expiry'], t('Invalid date'));
    }

    $timestamp = strtotime($form_state['values']['new_expiry']);

    if ($timestamp <= $_SERVER['REQUEST_TIME']) {
      form_error($form['options']['new_expiry'], t('Date must be later than today.'));
    }
    else {
      form_set_value($form['options']['new_expiry'], format_date($timestamp, 'custom', 'Y-m-d'), $form_state);
    }
  }
}

/**
 * Submit function.
 *
 * Updates selected reservations.
 */
function alma_user_ding_reservation_list_form_update($form, $form_state) {
  $creds = ding_library_user_get_credentials($form_state['values']['account']);
  $reservations_ids = array_filter($form_state['values']['selected']);
  $changes = array();
  if ($form_state['values']['new_expiry']) {
    $changes['expiry'] = $form_state['values']['new_expiry'];
  }
  if ($form_state['values']['new_pickup_branch']) {
    $changes['pickup_branch'] = $form_state['values']['new_pickup_branch'];
  }
  $res = TRUE;
  foreach ($reservations_ids as $reservations_id) {
    alma_client_change_reservation($creds['user_id'], $creds['password'], $form_state['reservations'][$reservations_id], $changes);
  }
  // AlmaClient doesn't check for success, so why should we?
  drupal_set_message(t('Reservations updated.'));
}

/**
 * Submit function.
 *
 * Updates selected reservations.
 */
function alma_user_ding_reservation_list_form_remove($form, $form_state) {
  $creds = ding_library_user_get_credentials($form_state['values']['account']);
  $reservations_ids = array_filter($form_state['values']['selected']);
  foreach ($reservations_ids as $reservations_id) {
    alma_client_remove_reservation($creds['user_id'], $creds['password'], $form_state['reservations'][$reservations_id]);
  }
  drupal_set_message(t('Reservations deleted.'));
}

// Cart reservation support.

/**
 * Implements hook_form_alter
 */
function alma_user_form_ding_cart_list_form_alter(&$form, &$form_state) {
  $interest_period = (isset($account->interest_period) && $account->interest_period > 10) ? $account->interest_period : DING_LIBRARY_USER_DEFAULT_INTEREST_PERIOD;

  $form['options']['expiry'] = array(
    '#type' => 'date_popup',
    '#title' => t('Not interested after'),
    '#date_format' => DATE_FORMAT_DATE,
    '#date_year_range' => '-0:+2',
    '#default_value' => date('Y-m-d', $_SERVER['REQUEST_TIME'] + $interest_period * 86400),
  );

  $form['options']['pickup_branch'] = array(
    '#type' => 'select',
    '#title' => t('Pickup branch'),
    '#options' => alma_client()->get_reservation_branches(),
  );

  $form['reserve'] = array(
    '#type' => 'submit',
    '#value' => t('Reserve selected'),
    '#attributes' => array('class' => 'reserve-button'),
    '#op' => 'reserve',
    '#submit' => array('alma_user_ding_cart_list_form_submit'),
  );
}

/**
 * Custom submit handler
 */
function alma_user_form_ding_cart_list_form_submit($form, &$form_state) {
  foreach ($form_state['values']['selected'] as $local_id) {
    $reservation = ding_provider_invoke('reservation', 'create', $form_state['values']['account'], $local_id, array('valid_to' => $form_state['values']['expiry'], 'pickup_branch' => $form_state['values']['pickup_branch']));

    // If reservation was successful, remove the item from the cart.
    if ($reservation and $reservation != DING_PROVIDER_AUTH_REQUIRED) {
      db_query("DELETE FROM {ding_cart} WHERE uid = %d AND local_id = '%s';", $form_state['values']['account']->uid, $local_id);
    }
    else {
      drupal_set_message(t('Reservation of “@title” failed. It may be on your reservation list already.', array('@title' => $form['cart']['#value'][$local_id]['title'])), 'error');
    }
  }
}
